{"version":3,"sources":["components/text/text.js","components/buttons/buttons.js","App.js","serviceWorker.js","index.js"],"names":["text","props","id","quote","author","className","href","target","rel","onClick","handle","App","newQuote","handleQuote","state","this","axios","get","then","res","data","quotes","numQuote","Math","floor","random","length","setState","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sTAGe,SAASA,EAAKC,GAE1B,OACC,6BACC,wBAAIC,GAAG,QAAQD,EAAME,OACrB,uBAAGD,GAAG,UAAUD,EAAMG,S,UCLZ,WAASH,GACtB,OACE,yBAAKI,UAAU,WACb,uBAAGH,GAAG,cAAcI,KAAI,gDAA2CL,EAAME,MAAjD,YAA0DF,EAAMG,QAAUG,OAAO,SAASC,IAAI,uBAAsB,uBAAGH,UAAU,mBACzJ,4BAAQH,GAAG,YAAYO,QAASR,EAAMS,QAAtC,e,iBCsCSC,E,YArCb,aAAe,IAAD,8BACZ,+CAuBFC,SAAW,kBAAM,EAAKC,eAtBpB,EAAKC,MAAQ,CACXX,MAAO,GACPC,OAAQ,IAJE,E,iFASZW,KAAKF,gB,oCAEQ,IAAD,OAEZG,IAAMC,IADI,0IAEPC,MAAK,SAAAC,GACJ,IAAIC,EAAOD,EAAIC,KAAKC,OAChBC,EAAWC,KAAKC,MAAMD,KAAKE,SAAWL,EAAKM,QAC/C,EAAKC,SAAS,CACZxB,MAAOiB,EAAKE,GAAUnB,MACtBC,OAAQgB,EAAKE,GAAUlB,c,+BAMrB,IAAD,EACmBW,KAAKD,MAAvBX,EADD,EACCA,MAAOC,EADR,EACQA,OACf,OACE,yBAAKF,GAAG,WACN,yBAAKA,GAAG,aACN,kBAAC,EAAD,CAAMC,MAAOA,EAAOC,OAAQA,IAC5B,kBAAC,EAAD,CAASD,MAAOA,EAAOC,OAAQA,EAAQM,OAAQK,KAAKH,iB,GAhC5CgB,a,MCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.846bdfd3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './text.css';\r\n\r\nexport default function text(props) {\r\n\r\n   return (\r\n    <div>\r\n     <h3 id=\"text\">{props.quote}</h3>\r\n     <p id=\"author\">{props.author}</p>\r\n    </div>\r\n   )\r\n}\r\n","import React from 'react';\r\nimport './buttons.css';\r\n\r\nexport default function(props) {\r\n  return (\r\n    <div className=\"buttons\">\r\n      <a id=\"tweet-quote\" href={`https://twitter.com/intent/tweet?text=${props.quote} ${props.author}`} target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"fa fa-twitter\"></i></a>\r\n      <button id=\"new-quote\" onClick={props.handle}>New Quote</button>\r\n    </div>\r\n  );\r\n}","import React, { Component } from 'react';\n\nimport Text from './components/text/text';\nimport Buttons from './components/buttons/buttons';\n\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      quote: '',\n      author: ''\n    }\n    \n  }\n  componentDidMount() {\n    this.handleQuote();\n  }\n  handleQuote() {\n    let url = 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json';\n    axios.get(url) \n      .then(res => {\n        let data = res.data.quotes;\n        let numQuote = Math.floor(Math.random() * data.length);\n        this.setState({\n          quote: data[numQuote].quote,\n          author: data[numQuote].author\n        })\n      }\n      )\n  } \n  newQuote = () => this.handleQuote();\n  render() {\n    const { quote, author } = this.state\n    return (\n      <div id=\"wrapper\">\n        <div id=\"quote-box\">\n          <Text quote={quote} author={author} />\n          <Buttons quote={quote} author={author} handle={this.newQuote} />\n        </div>\n      </div>\n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}